(import cstdio)
(import cstdlib)
(import cstring)

(import unistd)
(import vector)
(import derivations)
(import algorithms)
(import macros)

(def standard-type
  (macro intern (T)
    (std.macros.qq do
      (std.concepts.implement Struct (uq T))
      (std.concepts.implement PreferRefs (uq T))
      (std.concepts.instantiate swap (uq T))
      (std.concepts.implement Swappable (uq T))

      (def = (fn intern bool ((a (ref (const (uq T))))
                              (b (ref (const (uq T)))))
      (p= (@:@ a name) (@:@ b name))))

      (std.concepts.instantiate != (uq T))

      (def < (fn intern bool ((a (ref (const (uq T))))
                              (b (ref (const (uq T)))))
      (p< (@:@ a name) (@:@ b name))))

      (std.concepts.instantiate <= (uq T))
      (std.concepts.instantiate >  (uq T))
      (std.concepts.instantiate >= (uq T))

      (std.concepts.implement EqualityComparable (uq T))
      (std.concepts.implement LessThanComparable (uq T))
      (std.concepts.instantiate Vector (uq T)))))

;; Types and instantiations.

(def = (fn intern bool ((a (p (const char)))
                        (b (p (const char))))
  (= 0 (strcmp a b))))

(def < (fn intern bool ((a (p (const char)))
                        (b (p (const char))))
  (< 0 (strcmp a b))))

(def member-def
  (struct intern ((name (p (const char)))
                  (type (p (const char))))))

(std.concepts.implement Struct member-def)
(std.concepts.instantiate relations member-def)

(def struct-def
  (struct intern ((name    (p char))
                  (linkage (p (const char)))
                  (info    (p char))
                  (members (p member-def)))))

(standard-type struct-def)

(def concept-def
  (struct intern ((name    (p char))
                  (info    (p char)))))

(standard-type concept-def)

(def proc-type
  (enum intern int (FN MACRO CONCEPT-MACRO)))

(def param-def
  (struct intern ((name (p (const char)))
                  (type (p (const char)))
                  (info (p (const char))))))
(def proc-def
  (struct intern ((name    (p char))
                  (linkage (p (const char)))
                  (returns (p (const char)))
                  (info    (p char))
                  (params  (p param-def)))))

(standard-type proc-def)

(def node (struct opaque))
(def (Vector node) (struct opaque))
(def node
  (struct intern ((name      (p char))
                  (is-list   bool)
                  (token-str (p (const char)))
                  (list-node (p (Vector node))))))

(standard-type node)

(def variable-def
  (struct intern ((name    (p char))
                  (type    (p (const char)))
                  (linkage (p (const char)))
                  (info    (p char)))))

(standard-type variable-def)

(def enum-def
  (struct intern ((name    (p char))
                  (type    (p (const char)))
                  (linkage (p (const char)))
                  (info    (p char))
                  (members (p (p (const char)))))))

(standard-type enum-def)

;; S-expression parsing.

; Print str to stderr and exit.
(def err (fn intern bool ((str (p (const char))))
  (fprintf stderr "error: %s.\n" str)
  (exit 1)
  (return false)))

; Print a node to standard output.
(def print-node (fn intern void ((nd (p node)))
  (and (not (@:@ nd is-list))
       (do (printf "%s " (@:@ nd token-str))
           (return)))
  (printf "(")
  (let ((b \ (begin (@ (@:@ nd list-node))))
        (e \ (end   (@ (@:@ nd list-node)))))
    (for true (!= b e) (setv b (successor b))
      (print-node (source b))))
  (printf ")")
  (return)))

; Check whether a node is empty.
(def is-empty-node (fn intern bool ((mynode (p node)))
  (and (null mynode)
       (return true))
  (and (null (@:@ mynode token-str))
       (and (not (@:@ mynode is-list))
            (null (@:@ mynode list-node))))))

; Set the node to be a token node, using the provided string.
(def set-to-string (fn intern void ((nd  (p node))
                                    (buf (p char)))
  (setf (:@ nd token-str) (cast buf (p (const char))))
  (setf (:@ nd is-list) false)
  (setf (:@ nd list-node) (nullptr (Vector node)))
  (return)))

; Check whether a character is whitespace.
(def is-whitespace (fn intern bool ((c char))
  (or (= c #\SPACE) (or (= c #\TAB) (= c #\NEWLINE)))))

; Return the node at a specified point in the hierarchy.
(def get-node (fn intern (p node) ((nd (p node))
                                   (n int)
                                   ...)
  (def arglist (var auto va-list))
  (va-start (cast (# arglist) (p void)))
  (def index (var auto int 0))
  (while (> n 0)
    (setv index (va-arg (# arglist) int))
    (and (null (@:@ nd list-node))
         (do (err "invalid get-node call")
             true))
    (setv nd ($ (@ (@:@ nd list-node)) index))
    (decv n))
  (return nd)))

; Stringify the given node.
(def node-to-string (fn intern (p (const char)) ((nd (p node)))
  (and (not (null (@:@ nd token-str)))
       (return (@:@ nd token-str)))
  (def buf (var auto \ (malloc' 255 char)))
  (setf buf #\NULL)
  (and (is-empty-node nd)
       (do (strcat buf "N/A") (return (cast buf (p (const char))))))
  (and (and (= (cast 2 size)
               (size (@ (@:@ nd list-node))))
            (or (= "uq"  (node-to-string (get-node nd 1 0)))
                (= "tpw" (node-to-string (get-node nd 1 0)))))
       (do (strcat buf (node-to-string (get-node nd 1 1)))
           (return (cast buf (p (const char))))))
  (strcat buf "(")
  (let ((v \ (@:@ nd list-node))
        (b \ (begin (@ v)))
        (e \ (end   (@ v))))
    (for true (!= b e) (setv b (successor b))
      (let ((newbuf \ (node-to-string (source b))))
      (strcat buf newbuf)
      (and (!= e (successor b))
           (do (strcat buf " ") true)))))
  (strcat buf ")")
  (return (cast buf (p (const char))))))

; Parse s-expressions and return a node.
(def parse-s-expressions
  (fn intern int ((retval (p node)) (indent int))
    (def b (var auto size 0))
    (def c (var auto char))
    (def last (var auto char #\NULL))
    (while true
      (setv b (fread (cast (# c) (p void)) 1 1 stdin))
      (printf "")
      (and (= (cast 0 size) b)
           (return 0))
      (and (and (= last #\#) (= c #\|))
           (return 0))
      (setv last c)
      (and (is-whitespace c)
           (continue))
      (break))
    (and (= c #\))
         (do (set-to-string retval (nullptr char))
             (return 2)))
    (setv last c)
    (and (!= c #\()
         (do (def buf (var auto (p char) (malloc' 255 char)))
             (def bp  (var auto \ buf))
             (setf bp c)
             (setv bp (p+ bp 1))
             (and (and (= last #\#) (= c #\|))
                  (return 0))
             (while true
               (setv b (fread (cast bp (p void)) 1 1 stdin))
               (and (= (cast 0 size) b)
                    (return 1))
               (and (and (= last #\#) (= (@ bp) #\|))
                    (return 0))
               (setv last (@ bp))
               (and (= (@ bp) #\))
                    (do (setf bp #\NULL)
                        (set-to-string retval buf)
                        (return 2)))
               (and (is-whitespace (@ bp))
                    (do (setf bp #\NULL)
                        (set-to-string retval buf)
                        (return 1)))
               (setv bp (p+ bp 1)))
             true))
    (setf (:@ retval token-str) (cast (nullptr char) (p (const char))))
    (setf (:@ retval is-list) true)
    (setf (:@ retval list-node) (malloc' 1 (Vector node)))
    (init (@ (@:@ retval list-node)) 10)
    (def new-node (var auto (p node)))
    (def res (var auto int))
    (while true
      (setv new-node (malloc' 1 node))
      (setv res (parse-s-expressions new-node (+ 1 indent)))
      (and (= 0 res) (return 0))
      (and (is-empty-node new-node)
           (break))
      (push-back (@ (@:@ retval list-node)) (@ new-node))
      (and (= 2 res) (break)))
    (return 1)))

;; Common functions.

; Read a line from standard input, up to limit characters, into buf.
(def get-line (fn intern size ((buf (p char)) (limit int))
  (def b (var auto size 0))
  (def c (var auto size 0))
  (while (< c (cast limit size))
    (setv b (fread (cast buf (p void)) 1 1 stdin))
    (and (= (cast 0 size) b)
         (do (setf buf #\NULL)
             (return c)))
    (and (= #\NEWLINE (@ buf))
         (do (setf (p+ buf 1) #\NULL)
             (setv c (+ c (cast 1 size)))
             (return c)))
    (setv buf (p+ buf b))
    (setv c (+ c (cast 1 size))))
  (return c)))

; Return a pointer to the first char within str past any initial whitespace.
(def remove-whitespace (fn intern (p (const char)) ((str (p (const char))))
  (while (= (@ str) #\SPACE)
    (setv str (p+ str 1)))
  (return str)))

; Copy the portion of str between the strings begin and end into buf.
(def get-element (fn intern bool ((str   (p (const char)))
                                  (begin (p (const char)))
                                  (end   (p (const char)))
                                  (buf   (p char)))
  (let ((fb \ (if (null begin) str (strstr str begin))))
    (and (null fb) (return false))
    (let ((fbe \ (remove-whitespace
                   (p+ fb (if (null begin) (cast 0 size) (strlen begin)))))
          (fe  \ (strstr fbe end)))
      (strncpy buf fbe (cast (p- fe fbe) int))
      (setf ($ buf (cast (p- fe fbe) int)) #\NULL)
      (return true)))))

; Read from standard input into linebuf, and copying to buf, until a
; line containing the specified string is reached.
(def get-until (fn intern void ((linebuf   (p char))
                                (buf       (p char))
                                (stop-str1 (p (const char)))
                                (stop-str2 (p (const char))))
  (and (or (p= (remove-whitespace linebuf)
               (strstr linebuf stop-str1))
           (p= (remove-whitespace linebuf)
               (strstr linebuf stop-str2)))
       (return))
  (let ((linebufp   (p char))
        (past-first \ false)
        (whitespace \ 0)
        (c          size 0))
    (while (do (setv c (get-line linebuf 255))
               (and (!= c (cast 0 size))
                    (and (not (p= (remove-whitespace linebuf)
                                  (strstr linebuf stop-str1)))
                         (not (p= (remove-whitespace linebuf)
                                  (strstr linebuf stop-str2))))))
      (setv linebufp ($ linebuf 0))
      (if (not past-first)
          (do (while (= #\SPACE (@$ linebufp 0))
                (do (incv whitespace)
                    (setv linebufp (p+ linebufp 1))))
              (setv past-first true))
      (if (> c (cast whitespace size))
          (setv linebufp (p+ linebufp whitespace))
          true))
      (strcat buf linebufp))
    (return))))

;; Structs.

(def struct-defs (var intern (Vector struct-def)))

; Add a struct definition to the list of struct definitions.
(def add-struct-def (fn intern void ((name    (p char))
                                     (linkage (p (const char)))
                                     (info    (p char))
                                     (members (p member-def)))
  (let ((nsd struct-def ((name    name)
                         (linkage (remove-whitespace linkage))
                         (info    info)
                         (members members))))
    (push-back struct-defs nsd)
    (return))))

; Print the members of a struct definition to standard output.
(def print-members (fn intern void ((strd (p struct-def)))
  (let ((members \ (@:@ strd members)))
    (and (or (null members) (null (@:@ members name)))
         (do (printf " N/A\n")
             (return)))
    (while (and (not (null members))
                (not (null (@:@ members name))))
      (printf "  * `(%s %s)`\n"
              (@:@ members name)
              (remove-whitespace (@:@ members type))
      (setv members (p+ members 1))))
    (printf "\n"))
    (return)))

; Print a struct definition to standard output.
(def print-struct (fn intern void ((strd (p struct-def)))
  (let ((linkage \ (@:@ strd linkage))
        (name    \ (@:@ strd name)))
    (and (= 0 (cast (strlen linkage) int))
         (setv linkage "N/A"))
    (printf "#### `%s`\n\n" name)
    (printf "Linkage: `%s`\n" linkage)
    (printf "Members:")
    (let ((members \ (@:@ strd members)))
      (if (or (null members) (null (@:@ members name)))
          (do (printf " N/A\n")
              true)
          (do (printf "\n\n")
              (print-members strd)
              true)))
    (printf "\n")
    (printf "%s\n" (@:@ strd info))
    (return))))

; Parse a struct definition and add it to the list, beginning with buf
; and using standard input for the subsequent lines.
(def parse-struct (fn intern bool ((buf (p (const char))))
  (def name (var auto (p char) (malloc' 255 char)))
  (def info (var auto (p char) (malloc' 2048 char)))
  (def linkage (var auto (p char) (malloc' 32 char)))
  (setf ($ info 0) #\NULL)
  (def n (var auto \ (get-element buf "@struct " "\n" name)))
  (and (not n) (err "no struct name found"))

  (def mybuf (var auto (array-of 255 char)))
  (def mybufp (var auto (p char) ($ mybuf 0)))
  (def c (var auto size 1))
  (def linecount (var auto \ 0))
  (def ws (var auto size 0))
  (get-line mybuf 255)

  (get-until mybuf info "@" "|#")

  (while (and (!= c (cast 0 size))
              (not (p= (nullptr char) (strstr mybuf "@"))))
    (setv mybufp ($ mybuf 0))
    (if (> c ws)
        (setv mybufp (p+ mybufp ws))
        true)
    (setv n (get-element mybufp "@linkage " "\n" linkage))
    (setv c (get-line mybuf 255)))

  (def members (var auto \ (malloc' 10 member-def)))
  (def memberi (var auto \ 0))
  (def memberbuf (var auto (array-of 255 char)))

  (and (and (!= (cast 0 size) c)
            (not (= (remove-whitespace mybuf) "|#\n")))
    (do (while (do (setv c (get-line mybuf 255))
                   (and (!= (cast 0 size) c)
                        (not (= (remove-whitespace mybuf) "|#\n"))))
          true)
      true))

  (def struct-node (var auto (p node) (malloc' 1 node)))
  (parse-s-expressions struct-node 0)
  (and (not (is-empty-node struct-node))
       (let ((pfirst \ (node-to-string (get-node struct-node 1 0)))
             (pname  \ (node-to-string (get-node struct-node 1 1)))
             (lastp  \ (strrchr pname #\.))
             (last   \ (strrchr name  #\.))
             (dpname \ (if (not (null lastp))
                           (cast (p+ lastp 1) (p (const char)))
                           pname))
             (dname  \ (if (not (null last))
                           (cast (p+ last  1) (p (const char)))
                           (cast name (p (const char))))))
         (and (and (= dpname dname)
                   (= pfirst "def"))
           (do (strcpy linkage (node-to-string (get-node struct-node 2 2 1)))
               (and (< (cast 2 size)
                       (size (@ (@:@ (get-node struct-node 1 2) list-node))))
                    (let ((sparams \ (@:@ (get-node struct-node 2 2 2) list-node)))
                      (let ((b  \ (begin (@ sparams)))
                            (e  \ (end   (@ sparams)))
                            (pc \ 0)
                            (op (p member-def)))
                        (for true (!= b e) (setv b (successor b))
                          (setf ($ members memberi)
                                ((name (node-to-string (get-node (source b) 1 0)))
                                 (type (node-to-string (get-node (source b) 1 1)))))
                          (incv memberi)))
                      true))
               true))))

  (setf (: (@$ members memberi) name) (cast (nullptr char) (p (const char))))

  (add-struct-def name linkage info members)
  true))

;; Functions, macros, and concept macros.

(def fn-defs (var intern (Vector proc-def)))
(def macro-defs (var intern (Vector proc-def)))
(def concept-macro-defs (var intern (Vector proc-def)))

; Add a procedure definition to a list of procedure definitions.
(def add-proc-def (fn intern void ((name    (p char))
                                   (linkage (p (const char)))
                                   (returns (p (const char)))
                                   (info    (p char))
                                   (params  (p param-def))
                                   (type    proc-type))
  (def procdef
    (var auto proc-def
      ((name    name)
       (linkage (remove-whitespace linkage))
       (returns (remove-whitespace returns))
       (info    info)
       (params  params))))
  (if (= type (proc-type FN))
      (push-back fn-defs procdef)
  (if (= type (proc-type MACRO))
      (push-back macro-defs procdef)
      (push-back concept-macro-defs procdef)))
  (return)))

; Print a procedure parameter to standard output.
(def print-param (fn intern void ((param (p param-def)))
  (if (and (not (null (@:@ param type)))
           (> (strlen (@:@ param type)) (cast 0 size)))
      (printf "  * `(%s %s)`"
              (@:@ param name)
              (remove-whitespace (@:@ param type)))
      (printf "  * `%s`"
              (@:@ param name)))
  (let ((info \ (remove-whitespace (@:@ param info)))
        (pres \ (> (strlen info) (cast 0 size))))
    (and pres (do (printf ": %s" info) true)))
  (printf "\n")
  (return)))

; Print a procedure to standard output.
(def print-proc (fn intern void ((fnd (p proc-def)))
  (def linkage (var auto \ (@:@ fnd linkage)))
  (and (= 0 (cast (strlen linkage) int))
       (setv linkage "N/A"))
  (def params (var auto \ (@:@ fnd params)))
  (printf "#### `%s`\n\n" (@:@ fnd name))
  (printf "Linkage: `%s`\n" linkage)
  (def returns (var auto \ (@:@ fnd returns)))
  (and (and (not (null returns))
            (!= 0 (cast (strlen returns) int)))
       (do (printf "Returns: `%s`\n" returns) true))
  (printf "Parameters:")
  (if (or (null params) (null (@:@ params name)))
      (printf " N/A\n")
      (if (= (@:@ params name) "void")
          (printf " N/A\n")
          (do (printf "\n\n")
              (while (and (not (null params))
                          (not (null (@:@ params name))))
                (print-param params)
                (setv params (p+ params 1)))
              (printf "\n"))))
  (printf "\n")
  (printf "%s\n" (@:@ fnd info))
  (return)))

; Parse a procedure definition and add it to the list, beginning with
; buf and using standard input for the subsequent lines.
(def parse-fn (fn intern bool ((buf (p (const char)))
                               (type proc-type))
  (def name (var auto (p char) (malloc' 255 char)))
  (def info (var auto (p char) (malloc' 2048 char)))
  (def linkage (var auto (p char) (malloc' 32 char)))
  (def returns (var auto (p char) (malloc' 255 char)))
  (setf ($ info 0) #\NULL)
  (def n (var auto \
    (get-element buf (if (= type (proc-type FN))
                        "@fn "
                    (if (= type (proc-type MACRO))
                        "@macro "
                        "@concept-macro "))
                "\n" name)))
  (and (not n) (err "no fn name found"))

  (def mybuf (var auto (array-of 255 char)))
  (def mybufp (var auto (p (const char)) ($ mybuf 0)))
  (def c (var auto size 1))
  (def linecount (var auto \ 0))
  (def ws (var auto size 0))
  (get-line mybuf 255)

  (get-until mybuf info "@" "|#")

  (def params (var auto \ (malloc' 10 param-def)))
  (def parami (var auto \ 0))
  (def parambuf (var auto (array-of 255 char)))

  (while (and (!= c (cast 0 size))
              (not (null (strstr mybuf "@"))))
    (setv mybufp ($ mybuf 0))
    (if (> c ws)
        (setv mybufp (p+ mybufp ws))
        true)
    (setv n (get-element mybufp "@linkage " "\n" linkage))
    (and (not n)
         (setv n (get-element mybufp "@return-type " "\n" returns)))
    (and (not n)
         (do (setv n (get-element mybufp "@param " " " parambuf))
             (and n
                 (do (def paramname (var auto \ (malloc' 255 char)))
                     (def paramtype (var auto \ (malloc' 255 char)))
                     (def paraminfo (var auto \ (malloc' 255 char)))
                     (strcpy paramname parambuf)
                     (setv mybufp (remove-whitespace
                                    (p+ (strstr mybufp "@param ")
                                        (cast 7 size))))
                     (setv mybufp (remove-whitespace
                                    (p+ mybufp (- (strlen paramname)
                                                  (cast 1 size)))))
                     (setv n (get-element mybufp " " "\n" paraminfo))
                     (and (not n) (err "no parameter info found"))
                     (setv c (get-line mybuf 255))
                     (and (= c (cast 0 size)) (err "no parameter type line found"))
                     (setv mybufp ($ mybuf 0))
                     (setv n (get-element mybufp "@param-type " "\n" paramtype))
                     (setf ($ params parami) ((name paramname)
                                              (type (if (not n)
                                                        (nullptr char)
                                                        paramtype))
                                              (info paraminfo)))
                     (incv parami)
                     (and (not n) (continue))))))
    (setv c (get-line mybuf 255)))

  (and (and (!= (cast 0 size) c)
            (not (= (remove-whitespace mybuf) "|#\n")))
    (do (while (do (setv c (get-line mybuf 255))
                   (and (!= (cast 0 size) c)
                        (not (= (remove-whitespace mybuf) "|#\n"))))
          true)
      true))

  (def fn-node (var auto (p node) (malloc' 1 node)))
  (parse-s-expressions fn-node 0)
  (and (and (not (is-empty-node fn-node))
            (= (proc-type CONCEPT-MACRO) type))
       (let ((pfirst \ (node-to-string (get-node fn-node 1 0)))
             (pname  \ (node-to-string (get-node fn-node 1 1)))
             (lastp  \ (strrchr pname #\.))
             (last   \ (strrchr name  #\.))
             (dpname \ (if (not (null lastp))
                           (cast (p+ lastp 1) (p (const char)))
                           pname))
             (dname  \ (if (not (null last))
                           (cast (p+ last  1) (p (const char)))
                           (cast name (p (const char))))))
         (and (and (= dpname dname)
                   (= pfirst "def-concept-macro"))
           (do (strcpy linkage (node-to-string (get-node fn-node 1 2)))
               (let ((sparams \ (@:@ (get-node fn-node 1 3) list-node)))
                 (let ((b  \ (begin (@ sparams)))
                       (e  \ (end   (@ sparams)))
                       (pc \ 0)
                       (op (p param-def)))
                   (for true (!= b e) (setv b (successor b))
                     (setv op ($ params pc))
                     (and (not (null op))
                          (if (@:@ (source b) is-list)
                              (do (setf (:@ op name)
                                        (node-to-string
                                          (get-node (source b) 1 0)))
                                  (setf (:@ op type)
                                          (node-to-string
                                          (get-node (source b) 1 1))))
                              (do (setf (:@ op name)
                                        (node-to-string (source b))))))
                     (incv pc))))
               true))))

  (def realparami (var auto int 0))
  (and (and (not (is-empty-node fn-node))
            (or (= (proc-type FN)    type)
                (= (proc-type MACRO) type)))
       (let ((pfirst \ (node-to-string (get-node fn-node 1 0)))
             (pname  \ (node-to-string (get-node fn-node 1 1)))
             (lastp  \ (strrchr pname #\.))
             (last   \ (strrchr name  #\.))
             (dpname \ (if (not (null lastp))
                           (cast (p+ lastp 1) (p (const char)))
                           pname))
             (dname  \ (if (not (null last))
                           (cast (p+ last  1) (p (const char)))
                           (cast name (p (const char))))))
         (and (and (= dpname dname)
                   (= pfirst "def"))
           (do (strcpy linkage (node-to-string (get-node fn-node 2 2 1)))
               (if (= (proc-type FN) type)
                   (strcpy returns (node-to-string (get-node fn-node 2 2 2)))
                   (strcpy returns ""))
               (def nexti (var auto \ (if (= (proc-type FN) type)
                                          3 2)))
               (let ((sparams \ (@:@ (get-node fn-node 2 2 nexti) list-node)))
                 (let ((b  \ (begin (@ sparams)))
                       (e  \ (end   (@ sparams)))
                       (pc \ 0)
                       (op (p param-def)))
                   (for true (!= b e) (setv b (successor b))
                     (setv op ($ params pc))
                     (and (> (+ pc 1) parami)
                          (do (setf ($ params pc) ((name "")
                                                   (type "")
                                                   (info "")))))
                     (incv realparami)
                     (if (@:@ (source b) is-list)
                         (do (setf (:@ op name)
                                   (node-to-string
                                     (get-node (source b) 1 0)))
                             (setf (:@ op type)
                                   (node-to-string
                                     (get-node (source b) 1 1))))
                         (do (setf (:@ op name)
                                   (node-to-string (source b)))))
                     (incv pc))))
               true))))

  (and (> realparami 0) (setv parami realparami))
  (setf (: (@$ params parami) name) (cast (nullptr char) (p (const char))))

  (add-proc-def name linkage returns info params type)
  true))

;; Concepts.

(def concept-defs (var intern (Vector concept-def)))

; Add a concept definition to the list of concept definitions.
(def add-concept-def (fn intern void ((name    (p char))
                                      (info    (p char)))
  (let ((cd concept-def ((name    name)
                         (info    info))))
    (push-back concept-defs cd)
    (return))))

; Print a concept definition to standard output.
(def print-concept (fn intern void ((cd (p concept-def)))
  (printf "#### `%s`\n\n" (@:@ cd name))
  (printf "%s\n" (@:@ cd info))
  (return)))

; Parse a concept definition and add it to the list, beginning with buf
; and using standard input for the subsequent lines.
(def parse-concept (fn intern bool ((buf (p (const char))))
  (def name (var auto (p char) (malloc' 255 char)))
  (def info (var auto (p char) (malloc' 2048 char)))
  (setf ($ info 0) #\NULL)
  (def n (var auto \ (get-element buf "@concept " "\n" name)))
  (and (not n) (err "no concept name found"))

  (def mybuf (var auto (array-of 255 char)))
  (def mybufp (var auto (p char) ($ mybuf 0)))
  (def c (var auto \ 1))
  (def linecount (var auto \ 0))
  (def ws (var auto \ 0))
  (get-line mybuf 255)

  (get-until mybuf info "|#" "|#")

  (add-concept-def name info)
  true))

;; Variables.

(def variable-defs (var intern (Vector variable-def)))

; Add a variable definition to the list of variable definitions.
(def add-variable-def (fn intern void ((name    (p char))
                                       (type    (p (const char)))
                                       (linkage (p (const char)))
                                       (info    (p char)))
  (let ((cd variable-def ((name    name)
                          (type    type)
                          (linkage linkage)
                          (info    info))))
    (push-back variable-defs cd)
    (return))))

; Print a variable definition to standard output.
(def print-variable (fn intern void ((vd (p variable-def)))
  (printf "#### `%s`\n\n" (@:@ vd name))
  (printf "Linkage: `%s`\n" (@:@ vd linkage))
  (printf "Type: `%s`\n\n" (@:@ vd type))
  (printf "%s\n" (@:@ vd info))
  (return)))

; Parse a variable definition and add it to the list, beginning with buf
; and using standard input for the subsequent lines.
(def parse-variable (fn intern bool ((buf (p (const char))))
  (def name (var auto (p char) (malloc' 255 char)))
  (def info (var auto (p char) (malloc' 2048 char)))
  (setf ($ info 0) #\NULL)
  (def n (var auto \ (get-element buf "@var " "\n" name)))
  (and (not n) (err "no variable name found"))

  (def mybuf (var auto (array-of 255 char)))
  (def mybufp (var auto (p char) ($ mybuf 0)))
  (def c (var auto \ 1))
  (def linecount (var auto \ 0))
  (def ws (var auto \ 0))
  (get-line mybuf 255)

  (get-until mybuf info "|#" "|#")

  (def type    (var auto \ ""))
  (def linkage (var auto \ ""))

  (def var-node (var auto (p node) (malloc' 1 node)))
  (parse-s-expressions var-node 0)
  (and (not (is-empty-node var-node))
       (let ((pfirst \ (node-to-string (get-node var-node 1 0)))
             (pname  \ (node-to-string (get-node var-node 1 1)))
             (lastp  \ (strrchr pname #\.))
             (last   \ (strrchr name  #\.))
             (dpname \ (if (not (null lastp))
                           (cast (p+ lastp 1) (p (const char)))
                           pname))
             (dname  \ (if (not (null last))
                           (cast (p+ last  1) (p (const char)))
                           (cast name (p (const char))))))
         (and (and (= dpname dname)
                   (= pfirst "def"))
           (do (setv linkage (node-to-string (get-node var-node 2 2 1)))
               (setv type (node-to-string (get-node var-node 2 2 2)))
               true))))

  (add-variable-def name type linkage info)
  true))

;; Enums.

(def enum-defs (var intern (Vector enum-def)))

; Add an enum definition to the list of enum definitions.
(def add-enum-def (fn intern void ((name    (p char))
                                   (type    (p (const char)))
                                   (linkage (p (const char)))
                                   (info    (p char))
                                   (members (p (p (const char)))))
  (let ((ed enum-def ((name    name)
                      (type    type)
                      (linkage linkage)
                      (info    info)
                      (members members))))
    (push-back enum-defs ed)
    (return))))

; Print an enum definition to standard output.
(def print-enum (fn intern void ((ed (p enum-def)))
  (printf "#### `%s`\n\n" (@:@ ed name))
  (printf "Linkage: `%s`\n" (@:@ ed linkage))
  (printf "Type: `%s`\n" (@:@ ed type))
  (let ((members \ (@:@ ed members)))
    (and (not (null members))
      (do (printf "Members:\n\n")
          (while (and (not (null members))
                      (not (null (@ members))))
            (printf "  * `%s`\n" (remove-whitespace (@ members)))
            (setv members (p+ members 1)))
          true)))
  (printf "\n")
  (printf "%s\n" (@:@ ed info))
  (return)))

; Parse an enum definition and add it to the list, beginning with buf
; and using standard input for the subsequent lines.
(def parse-enum (fn intern bool ((buf (p (const char))))
  (def name (var auto (p char) (malloc' 255 char)))
  (def info (var auto (p char) (malloc' 2048 char)))
  (setf ($ info 0) #\NULL)
  (def n (var auto \ (get-element buf "@enum " "\n" name)))
  (and (not n) (err "no enum name found"))

  (def mybuf (var auto (array-of 255 char)))
  (def mybufp (var auto (p char) ($ mybuf 0)))
  (def c (var auto \ 1))
  (def linecount (var auto \ 0))
  (def ws (var auto \ 0))
  (get-line mybuf 255)

  (get-until mybuf info "|#" "|#")

  (def linkage (var auto \ ""))
  (def type (var auto \ ""))

  (def params (var auto \ (malloc' 10 (p (const char)))))
  (def parami (var auto \ 0))
  (def parambuf (var auto (array-of 255 char)))

  (def enum-node (var auto (p node) (malloc' 1 node)))
  (parse-s-expressions enum-node 0)
  (and (not (is-empty-node enum-node))
       (let ((pfirst \ (node-to-string (get-node enum-node 1 0)))
             (pname  \ (node-to-string (get-node enum-node 1 1)))
             (lastp  \ (strrchr pname #\.))
             (last   \ (strrchr name  #\.))
             (dpname \ (if (not (null lastp))
                           (cast (p+ lastp 1) (p (const char)))
                           pname))
             (dname  \ (if (not (null last))
                           (cast (p+ last  1) (p (const char)))
                           (cast name (p (const char))))))
         (and (and (= dpname dname)
                   (= pfirst "def"))
           (do (setv linkage (node-to-string (get-node enum-node 2 2 1)))
               (setv type (node-to-string (get-node enum-node 2 2 2)))
               (let ((eparams \ (@:@ (get-node enum-node 2 2 3) list-node)))
                 (let ((b  \ (begin (@ eparams)))
                       (e  \ (end   (@ eparams))))
                   (for true (!= b e) (setv b (successor b))
                     (setf ($ params parami) (node-to-string (source b)))
                     (incv parami))))
               true))
          true))

  (setf ($ params parami) (nullptr char))
  (add-enum-def name type linkage info params)
  true))

;; Main.

(def main (fn extern-c int (void)
  (init struct-defs 1)
  (init fn-defs 10)
  (init macro-defs 10)
  (init concept-macro-defs 10)
  (init concept-defs 10)
  (init variable-defs 10)
  (init enum-defs 10)

  (def buf (var auto (array-of 255 char)))
  (get-line buf 255)
  (get-line buf 255)
  (def module-name (var auto (array-of 255 char)))
  (def n (var auto \ (get-element buf "@module " "\n" module-name)))
  (and (not n) (err "unable to find module name"))

  (printf "### Details\n\nModule: %s\n\n" module-name)
  (printf "### Description\n")
  (while (do (get-line buf 255) (not (= buf "|#\n")))
    (printf "%s" buf))

  (def c (var auto size 1))

  (while (!= c (cast 0 size))
    (while (do (setv c (get-line buf 255))
               (and (!= c (cast 0 size))
                    (and (p= (nullptr char)
                             (strstr (remove-whitespace buf) "#|\n"))
                         (!= #\@ (@ (remove-whitespace buf))))))
           true)
    (and (!= c (cast 0 size))
         (do
            (and (!= #\@ (@ (remove-whitespace buf)))
                 (do (setv c (get-line buf 255)) true))
            (def type (var auto (array-of 255 char)))
            (setv n (get-element buf "@" " " type))
            (and (not n) (err "invalid definition"))
            (if (= type "struct")
                (parse-struct buf)
            (if (= type "concept")
                (parse-concept buf)
            (if (= type "var")
                (parse-variable buf)
            (if (= type "enum")
                (parse-enum buf)
            (if (= type "fn")
                (parse-fn buf (proc-type FN))
            (if (= type "macro")
                (parse-fn buf (proc-type MACRO))
            (if (= type "concept-macro")
                (parse-fn buf (proc-type CONCEPT-MACRO))
                true))))))))))

  (and (not (empty variable-defs))
       (do (printf "\n\n### Variables\n\n")
           (let ((b \ (begin variable-defs))
                 (e \ (end   variable-defs)))
             (for true (!= b e) (setv b (successor b))
               (print-variable (source b))))
           true))

  (and (not (empty struct-defs))
       (do (printf "\n\n### Structs\n\n")
           (let ((b \ (begin struct-defs))
                 (e \ (end   struct-defs)))
             (for true (!= b e) (setv b (successor b))
               (print-struct (source b))))
           true))

  (and (not (empty enum-defs))
       (do (printf "\n\n### Enums\n\n")
           (let ((b \ (begin enum-defs))
                 (e \ (end   enum-defs)))
             (for true (!= b e) (setv b (successor b))
               (print-enum (source b))))
           true))

  (and (not (empty concept-defs))
       (do (printf "\n\n### Concepts\n\n")
           (let ((b \ (begin concept-defs))
                 (e \ (end   concept-defs)))
             (for true (!= b e) (setv b (successor b))
               (print-concept (source b))))
           true))

  (and (not (empty fn-defs))
       (do (printf "\n\n### Functions\n\n")
           (let ((b \ (begin fn-defs))
                 (e \ (end   fn-defs)))
             (for true (!= b e) (setv b (successor b))
               (print-proc (source b))))
           true))

  (and (not (empty concept-macro-defs))
       (do (printf "\n\n### Concept macros\n\n")
           (let ((b \ (begin concept-macro-defs))
                 (e \ (end   concept-macro-defs)))
             (for true (!= b e) (setv b (successor b))
               (print-proc (source b))))
           true))

  (and (not (empty macro-defs))
       (do (printf "\n\n### Macros\n\n")
           (let ((b \ (begin macro-defs))
                 (e \ (end   macro-defs)))
             (for true (!= b e) (setv b (successor b))
               (print-proc (source b))))
           true))


  0))
