(import cstdio) 

(import map)
(std.concepts.instantiate Map int int)

(def make-pair (macro intern (v1 v2) 
  (std.macros.qq (Pair int int) ((first (uq v1)) (second (uq v2))))))

(def main
  (fn extern-c int (void)
    (def m  (var auto (Map int int)))

    (if (= m m)
        (printf "Equal\n")
        (printf "Not equal\n"))

    (insert m (make-pair 1 2))
    (insert m (make-pair 3 4))
    (insert m (make-pair 5 6))
    (insert m (make-pair 7 8))

    (erase m 3)

    (let ((b \ (begin m))
          (e \ (end m)))
      (for true (!= b e) (setv b (successor b))
        (printf "%d: %d\n" (@: (@ (source b)) first)
                           (@: (@ (source b)) second))))

    (printf "%d: %d\n" (@ (source (find m 5))))
    (printf "%d: %d\n" (@ (source (find m 7))))
    (printf "%d: %d\n" (@ (source (find m 1))))

    (if (= m m)
        (printf "Equal\n")
        (printf "Not equal\n"))

    0))
