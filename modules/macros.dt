#|
@module macros

Provides the quasiquotation macro.

|#
(module macros (attr cto))

(import cstdio-core)
(import macros-core)
(import introspection)
(import stdlib)

(namespace std (namespace macros

(def is-unquote-node (fn extern bool ((frm (p DNode)))
  (def ts (var auto \ (@:@ frm token-str)))
  (if (null ts)
      (do (return false) true)
      true)
  (if (= 0 (strcmp ts "uq"))
      (do (return true) true)
      true)
  (if (= 0 (strcmp ts "uql"))
      (do (return true) true)
      true)
  (if (= 0 (strcmp ts "uq-nc"))
      (do (return true) true)
      true)
  (if (= 0 (strcmp ts "uql-nc"))
      (do (return true) true)
      true)
  (return false)))

(def is-unquote-form (fn extern bool ((frm (p DNode)))
  (def list-node (var auto \ (@:@ frm list-node)))
  (if (null list-node)
      (do (return false) true)
      true)
  (def next-node (var auto \ (@:@ list-node next-node)))
  (if (null next-node)
      (do (return false) true)
      true)
  (return (is-unquote-node list-node))))

(def ct-node-checks (fn extern bool ((mc (p MContext)) (frm (p DNode)))
  (if (is-unquote-form frm)
      (do (return true) true)
      true)
  (def frm-type (var auto \ (type-of mc frm true)))
  (if (null frm-type)
      (do (return false))
      true)
  (if (not (types-equal mc frm-type (q (p DNode))))
      (do (report-error mc frm "only DNodes may be unquoted")
          (return false))
      true)
  true))

#|
@macro qq

The 'general-use' quasiquotation macro. The forms handled specially
are:

  * `uq` (unquote): expands to the argument node, excluding any
    following nodes (i.e. excluding `next-node`);
  * `uql` (unquote-list): expands to the argument node, including all
    following nodes (i.e. including `next-node` and any subsequent
    `next-node`s of that node);
  * `uq-nc` (unquote no-copy): as per `uq`, except that the argument
    node is not copied on substitution; and
  * `uql-nc` (unquote-list no-copy): as per `uql`, except that the nodes
    are not copied on substitution.

Quasiquotation forms may be nested: each specially-handled form in a
nested `qq` must be wrapped with an additional `uq` for each level of
nesting.

The `-nc` versions should only be used when the argument node will not
be used again.

@linkage extern
|#
(def qq (macro extern (frm rest)
    (def arg-count (var auto \ (arg-count mc)))
    (setv arg-count (- arg-count 1))
    (def myargcount (var auto int arg-count))

    (def nullp (var auto (p DNode) (nullptr DNode)))
    (def holder (var auto (p DNode) (make-node mc)))
    (copy-to holder frm)
    (setf (:@ holder token-str) (nullptr char))
    (setf (:@ holder list-node) (nullptr DNode))

    (def va-dnode (var auto (p DNode)))
    (def temp-node (var auto (p DNode)))

    (def begin (var auto int 0))

    (setf (:@ holder is-list) 1)
    (setf (:@ holder list-node) frm)
    (setf (:@ holder next-node) nullp)
    (setv temp-node frm)
    (label begin-loop)
        (if (= arg-count 0) (goto end-loop) 0)

        (setv va-dnode (@$ rest begin))
        (setv begin (+ begin 1))
        (setf (:@ temp-node next-node) va-dnode)
        (setv temp-node va-dnode)
        (setv arg-count (- arg-count 1))
        (goto begin-loop)

    (label end-loop)

    (def vn (var auto \ (make-gensym-var-node mc)))

    (def current-firstnode (var auto (p DNode) (bqq @:' (uq vn) list-node)))
    (def current-lastnode  (var auto (p DNode)
        (@:' current-firstnode list-node next-node next-node)))

    (def block (var auto (p DNode) (bqq do 0)))
    (def blockstart (var auto (p DNode) block))
    (setv block (@:' block list-node next-node))

    (def cn (var auto (p DNode) (@:' holder list-node)))
    (def upvs (var auto (array-of 256 (p DNode))))
    (def upvs-count (var auto int 0))
    (def lastnodes (var auto (array-of 256 (p DNode))))

    (def tempform (var auto (p DNode)))

    (def repl-next (var auto int 0))
    (def processed-list (var auto int 0))
    (def no-down (var auto int 0))

    ;(printf "qq flag 3\n")

    (label begin-loop2)

        (do (if (is-non-empty-list cn)
                (do ;(printf "CN is list\n")
                (if (not (is-non-empty-list (@:' cn list-node)))
                    (do ;(printf "CN is list with first token: %s\n"
                                ;(@:' cn list-node token-str))
                    (if (and (= 0 (strcmp (@:' cn list-node token-str) "uq"))
                             (not (null (@:' cn list-node next-node))))
                        (do ;(printf "CN is uq!\n")
                            (setv processed-list 1)
                        (do (def checkform (var auto \ (@:' cn list-node next-node)))
                            (setv tempform
                                (if (not (null (@:' cn list-node
                                                       next-node
                                                       token-str)))
                                    checkform
                                    (do (setv no-down 1)
                                        (make-node-maker mc
                                                    (@:' cn
                                                          list-node
                                                          next-node)))))
                            (if (not (ct-node-checks mc checkform))
                                (return (nullptr DNode))
                                true)
                            (setf (:@ block next-node) (bqq do
                                (setv firstnode (uq current-firstnode))
                                (if (null (uq tempform))
                                    (do (report-error mc firstnode "unquoting null node")
                                        false)
                                    (do (setv newnode
                                        (std.macros.copy mc false (uq tempform)))
                                        (std.macros.copy-to firstnode newnode)
                                        true))))
                            (setv block (@:@ block next-node))
                            ;(getchar)
                            0))
                    (if (and (= 0 (strcmp (@:' cn list-node token-str) "uql"))
                             (not (null (@:' cn list-node next-node))))
                        (do ;(printf "CN is uq!\n")
                            (setv processed-list 1)
                        (do (setv tempform (@:' cn list-node next-node))
                            (if (not (ct-node-checks mc tempform))
                                (return (nullptr DNode))
                                true)
                            (setv no-down 1)
                            (def vn (var auto \ (make-gensym-var-node
                                                 mc)))
                            (setf (:@ block next-node) (bqq do
                                (setv firstnode (uq current-firstnode))
                                (if (null (uq tempform))
                                    (do (report-error mc firstnode "unquoting null node")
                                        false)
                                    (do (setv newnode (std.macros.copy mc
                                                        true (uq tempform)))
                                        (std.macros.copy-to firstnode newnode)
                                        (def (uq vn)
                                            (var auto \ (@:@ firstnode
                                            next-node)))
                                        (setf (:@ firstnode next-node)
                                              (@:@ newnode next-node))
                                        (setf
                                            (:@ (std.macros.get-last-node newnode)
                                                    next-node) (uq vn))))))
                            (setv block (@:@ block next-node))
                            ;(getchar)
                            0))
                    (if (and (= 0 (strcmp (@:' cn list-node token-str) "uq-nc"))
                             (not (null (@:' cn list-node next-node))))
                        (do ;(printf "CN is uq!\n")
                            (setv processed-list 1)
                        (do (setv tempform (@:' cn list-node next-node))
                            (if (not (ct-node-checks mc tempform))
                                (return (nullptr DNode))
                                true)
                            (setv no-down 1)
                            (setf (:@ block next-node) (bqq do
                                (setv firstnode (uq current-firstnode))
                                (if (null (uq tempform))
                                    (do (report-error mc firstnode "unquoting null node")
                                        false)
                                    (do (setv newnode (uq tempform))
                                        (std.macros.copy-to firstnode newnode)
                                        true))))
                            (setv block (@:@ block next-node))
                            ;(getchar)
                            0))
                    (if (and (= 0 (strcmp (@:' cn list-node token-str) "uql-nc"))
                             (not (null (@:' cn list-node next-node))))
                        (do ;(printf "CN is uq!\n")
                            (setv processed-list 1)
                        (do (setv tempform (@:' cn list-node next-node))
                            (if (not (ct-node-checks mc tempform))
                                (return (nullptr DNode))
                                true)
                            (setv no-down 1)
                            (setf (:@ block next-node) (bqq do
                                (setv firstnode (uq current-firstnode))
                                (if (null (uq tempform))
                                    (do (report-error mc firstnode "unquoting null node")
                                        false)
                                    (do (setv newnode (uq tempform))
                                        (std.macros.copy-to firstnode newnode)
                                        (def tv222
                                            (var auto \ (@:@ firstnode
                                            next-node)))
                                        (setf (:@ firstnode next-node)
                                            (@:@ newnode next-node))
                                        (setf (:@ (get-last-node newnode)
                                        next-node) tv222)
                                        true))))
                            (setv block (@:@ block next-node))
                            ;(getchar)
                            0))

                        0)))))
                    0))
                0)

            (if (and (= 0 no-down) (not (null (@:@ cn list-node))))
                (do ;(printf "Moving down into this list: ") (DNode-print cn) (printf "\n")

                    (setf ($ upvs upvs-count) cn)
                    (setf ($ lastnodes upvs-count) current-lastnode)
                    (incv upvs-count)

                    (setf (:@ current-lastnode next-node)
                          (mnfv mc "list-node"))
                    (setv current-lastnode
                          (@:@ current-lastnode next-node))
                    (setv cn (@:@ cn list-node))
                    (goto begin-loop2))

            (if (not (null (@:@ cn next-node)))
                (do ;(printf "Moving to next node in this list: ") (DNode-print cn) (printf "\n")
                    (setv no-down 0)
                    (setf (:@ current-lastnode next-node)
                          (mnfv mc "next-node"))
                    (setv current-lastnode
                          (@:@ current-lastnode next-node))
                    (setv cn (@:@ cn next-node))
                    (goto begin-loop2))

            (if (> upvs-count 0)
                (do ;(printf "Moving upwards: ") (DNode-print cn) (printf "\n")
                    (setv no-down 0)
                    (while (> upvs-count 0)
                        (decv upvs-count)
                        (setv cn (@ ($ upvs upvs-count)))
                        (setv current-lastnode (@ ($ lastnodes upvs-count)))
                        (if (not (null (@:@ cn next-node)))
                            (do
                                (setf (:@ current-lastnode next-node)
                                    (mnfv mc "next-node"))
                                (setv current-lastnode
                                    (@:@ current-lastnode next-node))
                                (setv cn (@:@ cn next-node))
                                (goto begin-loop2))
                            0))
                    (goto end-loop2))


                (goto end-loop2)))))

    (label end-loop2)
        (let ((res \ (bqq do (new-scope
            (def (uq vn) (var auto (p DNode) (std.macros.copy mc true
            (q (uq-nc holder)))))
            (def firstnode (var auto (p DNode)))
            (def trailing  (var auto (p DNode)))
            (def newnode   (var auto (p DNode)))
            (uql-nc blockstart)
            (uq vn)))))
          ;(DNode-print res)
          ;(printf "\n")
          res)))
))
