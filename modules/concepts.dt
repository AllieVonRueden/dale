#|
@module concepts

Imports the other concept-related modules, and implements the
following concepts:

  * `Swappable`;
  * `EqualityComparable`; and
  * `LessThanComparable`

over the built-in integral types, as well as `char`, `size` and
`ptrdiff`. Provides `swap` functions to suit, too.

|#
(module concepts)

(import concept-defs)

(using-namespace std.macros
(using-namespace std.concepts

#|
@macro refconst

Expands a form `frm` into `(ref (const frm))`.

|#
(def refconst
  (macro extern (frm)
    (qq ref (const (uq frm)))))

#|
@macro prefer-ref-bindings

Takes a type as its single argument.  Expands into a series of `def`
forms: the first is `prefer-refs`, being a boolean indicating whether
this type implements the `PreferRefs` concept; the second is `tpw`
(type parameter wrapper), which expands to `refconst` for types
preferring references and `identity` otherwise, and the third is `tvw'
(type value wrapper), which expands to `@` for types preferring
references and `identity` otherwise.

|#
(def prefer-ref-bindings
  (macro extern (T2)
    (qq do
      (def prefer-refs (var auto bool (not (has-errors mc
                                             (qq std.concepts.implements
                                               (uq T2) PreferRefs)))))
      (def tpw     (var auto (p DNode)
                             (mnfv mc (if prefer-refs
                                          "refconst" "identity"))))
      (def tvw     (var auto (p DNode)
                             (mnfv mc (if prefer-refs
                                          "@" "identity")))))))

(mfor T (char
         int  int8  int16  int32  int64
         uint uint8 uint16 uint32 uint64
         size ptrdiff)
  (def swap
    (fn extern void ((a (ref T))
                     (b (ref T)))
      (let ((temp T (@ a)))
        (setf a (@ b))
        (setf b temp)
        (return))))
  (implement Swappable T)
  (implement EqualityComparable T)
  (implement LessThanComparable T))

))
